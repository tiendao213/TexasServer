<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Appccelerate.Fundamentals</name>
    </assembly>
    <members>
        <member name="T:Appccelerate.Ensure">
            <summary>
            Provides several methods for validating arguments and throwing appropriate exceptions.
            </summary>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Verifies the <paramref name="argumentValue"/> is not <c>null</c> and throws an <see cref="T:System.ArgumentNullException"/> if it is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the <paramref name="argumentValue"/> to verify.</typeparam>
            <param name="argumentValue">The value to verify.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argumentValue"/> parameter is <c>null</c>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Verifies the <paramref name="argumentValue"/> is not <c>null</c> or an empty string and throws an <see cref="T:System.ArgumentNullException"/> if
            it is <c>null</c> or an <see cref="T:System.ArgumentException"/> if it is an empty string.
            </summary>
            <param name="argumentValue">The value to verify.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argumentValue"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="argumentValue"/> parameter is an empty string.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentNotNegative(System.Int32,System.String)">
            <summary>
            Verifies the <paramref name="argumentValue"/> is not a negative number and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if it is
            a negative number.
            </summary>
            <param name="argumentValue">The value to verify.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="argumentValue"/> parameter is a negative number.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentAssignableFrom``1(System.Type,``0,System.String)">
            <summary>
            Verifies the type of <paramref name="argumentValue"/> is assignable to the <paramref name="targetType"/> (meaning interfaces are
            implemented, or classes exist in the base class hierarchy) and throws an <see cref="T:System.ArgumentException"/> if it is not assignable or
            a <see cref="T:System.ArgumentNullException"/> if the <paramref name="targetType"/> is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the <paramref name="argumentValue"/> to verify.</typeparam>
            <param name="targetType">The target type that will be assigned to.</param>
            <param name="argumentValue">The value of the argument being assigned.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> parameter is <c>null</c>.
            - or - The <paramref name="argumentValue"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The type of <paramref name="argumentValue"/> parameter is not assignable to the <paramref name="targetType"/>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentTypeAssignableFrom(System.Type,System.Type,System.String)">
            <summary>
            Verifies the <paramref name="argumentValue"/> is assignable to the <paramref name="targetType"/> (meaning interfaces are implemented, 
            or classes exist in the base class hierarchy) and throws an <see cref="T:System.ArgumentException"/> if it is not assignable or
            a <see cref="T:System.ArgumentNullException"/> if the <paramref name="targetType"/> is <c>null</c>.
            </summary>
            <param name="targetType">The target type that will be assigned to.</param>
            <param name="argumentValue">The type of the argument being assigned.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> parameter is <c>null</c>.
            - or - The <paramref name="argumentValue"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="argumentValue"/> is not assignable to the <paramref name="targetType"/>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentInRange(System.Boolean,System.String)">
            <summary>
            Verifies the <paramref name="condition"/> evaluates to <c>true</c> and throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the <paramref name="condition"/>
            evaluates to <c>false</c>.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The message used for the <see cref="T:System.ArgumentOutOfRangeException"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentInRange``1(System.Boolean,``0,System.String,System.String)">
            <summary>
            Verifies the <paramref name="condition"/> evaluates to <c>true</c> for the <paramref name="argumentValue"/> and throws an <see cref="T:System.ArgumentOutOfRangeException"/>
            if the <paramref name="condition"/> evaluates to <c>false</c>.
            </summary>
            <typeparam name="T">The type of the <paramref name="argumentValue"/> to verify.</typeparam>
            <param name="condition">The condition to evaluate.</param>
            <param name="argumentValue">The value to verify.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <param name="message">The message used for the <see cref="T:System.ArgumentOutOfRangeException"/>. The message is being formatted using
            the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The <paramref name="argumentValue"/> is passed as first parameter and
            the <paramref name="argumentName"/> as second parameter to the formatting method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentMatches(System.Boolean,System.String)">
            <summary>
            Verifies the <paramref name="condition"/> evaluates to <c>true</c> and throws an <see cref="T:System.ArgumentException"/> if the <paramref name="condition"/>
            evaluates to <c>false</c>.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The message used for the <see cref="T:System.ArgumentException"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.
            - or - The <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.ArgumentMatches``1(System.Boolean,``0,System.String,System.String)">
            <summary>
            Verifies the <paramref name="condition"/> evaluates to <c>true</c> for the <paramref name="argumentValue"/> and throws an <see cref="T:System.ArgumentException"/>
            if the <paramref name="condition"/> evaluates to <c>false</c>.
            </summary>
            <typeparam name="T">The type of the <paramref name="argumentValue"/> to verify.</typeparam>
            <param name="condition">The condition to evaluate.</param>
            <param name="argumentValue">The value to verify.</param>
            <param name="argumentName">The name of the <paramref name="argumentValue"/>.</param>
            <param name="message">The message used for the <see cref="T:System.ArgumentException"/>. The message is being formatted using
            the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The <paramref name="argumentValue"/> is passed as first parameter and
            the <paramref name="argumentName"/> as second parameter to the formatting method.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.
            - or - The <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.OperationNotValid(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> with the specified <paramref name="message"/>.
            </summary>
            <param name="message">The message used for the <see cref="T:System.InvalidOperationException"/>.</param>
            <param name="arguments">The arguments used to format the <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.</exception>
            <exception cref="T:System.InvalidOperationException">This exception is always thrown.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.OperationValid(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies the <paramref name="condition"/> evaluates to <c>true</c> and throws an <see cref="T:System.InvalidOperationException"/> if the <paramref name="condition"/>
            evaluates to <c>false</c>.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The message used for the <see cref="T:System.InvalidOperationException"/>.</param>
            <param name="arguments">The arguments used to format the <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.OperationNotSupported(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:System.NotSupportedException"/> with the specified <paramref name="message"/>.
            </summary>
            <param name="message">The message used for the <see cref="T:System.NotSupportedException"/>.</param>
            <param name="arguments">The arguments used to format the <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.</exception>
            <exception cref="T:System.NotSupportedException">This exception is always thrown.</exception>
        </member>
        <member name="M:Appccelerate.Ensure.OperationSupported(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies the <paramref name="condition"/> evaluates to <c>true</c> and throws an <see cref="T:System.NotSupportedException"/> if the <paramref name="condition"/>
            evaluates to <c>false</c>.
            </summary>
            <param name="condition">The condition to evaluate.</param>
            <param name="message">The message used for the <see cref="T:System.NotSupportedException"/>.</param>
            <param name="arguments">The arguments used to format the <paramref name="message"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="message"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="message"/> parameter is an empty string.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="T:Appccelerate.Events.EventArgs`1">
            <summary>
            Generic EventArgs
            </summary>
            <typeparam name="T">Type of the contained value.</typeparam>
        </member>
        <member name="M:Appccelerate.Events.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Appccelerate.Events.EventArgs`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Appccelerate.Events.EventArgs`1.Value">
            <summary>
            Gets the contained value.
            </summary>
        </member>
        <member name="T:Appccelerate.Formatters.FormatHelper">
            <summary>
            Provides functionality for formatting strings.
            </summary>
        </member>
        <member name="M:Appccelerate.Formatters.FormatHelper.SecureFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replacement for the String.Format method, that throws an exception
            when the count of arguments does not match the count of placeholders.
            <para>
            If format and/or arguments are null then still a string is returned.
            </para>
            </summary>
            <param name="formatProvider">
            The format Provider.
            </param>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The arguments to the format string..
            </param>
            <returns>
            Returns the fully formatted string, if successful In case of
            an error, the format string and all parameters added in a list
            will be returned.
            </returns>
            <remarks>
            Tries to format with String.Format. In case of an Exception the
            original format string and all parameters added in a list will
            be returned.
            </remarks>
        </member>
        <member name="M:Appccelerate.Formatters.FormatHelper.ConvertToString(System.Collections.IEnumerable,System.String)">
            <summary>
            Converts a collection of objects to a string representation.
            </summary>
            <param name="collection">Collection of objects.</param>
            <param name="separator">Separator to separate objects.</param>
            <returns>String representation of the collection.</returns>
        </member>
        <member name="M:Appccelerate.Formatters.FormatHelper.ConvertToString(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)">
            <summary>
            Converts a dictionary of object, object to a string representation in the form of Key=Value<paramref name="separator"/>.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="separator">The separator to separate key value pairs.</param>
            <returns>String representation of the dictionary</returns>
        </member>
        <member name="T:Appccelerate.Formatters.StringTruncationFormatter">
            <summary>
            Allows to define the maximal length of an string. A string longer than the given value will be truncated.
            Use: Format("{0,-5:L5}", "123456")         -> "12345"
            Use: Format("{0,5:L5}", "123")             -> "  123"
            Use: Format("{0,-5:L10}", "1234567890123") -> "1234567890"
            </summary>
        </member>
        <member name="M:Appccelerate.Formatters.StringTruncationFormatter.GetFormat(System.Type)">
            <summary>
            String.Format calls this method to get an instance of an ICustomFormatter to handle the formatting.
            </summary>
            <param name="formatType">The requested formatType.</param>
            <returns>An ICustomFormatter.</returns>
        </member>
        <member name="M:Appccelerate.Formatters.StringTruncationFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            After String.Format gets the ICustomFormatter, it calls this format method on each argument.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg">The arguments for the format string.</param>
            <param name="formatProvider">The formatProvider.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="T:Appccelerate.Formatters.TypeExtensions">
            <summary>
            Contains extension methods for Type.
            </summary>
        </member>
        <member name="M:Appccelerate.Formatters.TypeExtensions.FullNameToString(System.Type)">
            <summary>
            Correctly formats the FullName of the specified type by taking generics into consideration.
            </summary>
            <param name="type">The type whose full name is formatted.</param>
            <returns>A correctly formatted full name.</returns>
        </member>
        <member name="T:Appccelerate.ValidatedNotNullAttribute">
            <summary>
            The attribute is used to decorate an argument in a argument validating method that it is being
            validated against <c>null</c> in the validating method. The attribute is used within the <see cref="T:Appccelerate.Ensure"/> 
            methods and should not be used elsewhere.
            </summary>
        </member>
    </members>
</doc>
